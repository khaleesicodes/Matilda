/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Project defaults to use Matilda
 */

plugins {
    id 'java'
}
group = 'org.matilda'
version = '0.1'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Configuration of Java compiler in order to run JDK with preview features
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += "--enable-preview"
}

// The matilda-agent.jar supplies the java agent that need to be attached when the jvm is started, the bootstrap jar needs
// to be appended to the botstrap class path
// TODO check for variable that updates jar version
tasks.withType(Test).configureEach {
    jvmArgs += ["--enable-preview","-javaagent:${project.rootDir}/build/libs/matilda-agent-${version}.jar",
                "-Dmatilda.bootstrap.jar=${project.rootDir}/build/libs/matilda-bootstrap-${version}.jar"]
    enableAssertions = true
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += ["--enable-preview","-javaagent:${project.rootDir}/build/libs/matilda-agent-${version}.jar",
                "-Dmatilda.bootstrap.jar=${project.rootDir}/build/libs/matilda-bootstrap-${version}.jar"]

}

// Build config for Access Control Class
task bootstrapJar(type: Jar) {
    from(sourceSets.main.output) {
        include "org/matilda/bootstrap/**"
        exclude "org/matilda/bootstrap/Caller.class" // this is a testing class that should not be packaged

    }
    archiveBaseName = 'matilda-bootstrap'
}

// Build config for the Agent jar, needs to explicitly run with premain methods and allow class configuration
task agentJar(type: Jar) {
    from(sourceSets.main.output) {
        exclude "org/matilda/bootstrap/**"
    }
    manifest {
        attributes(
                "Premain-Class": "org.matilda.AgentMatilda",
                "Can-Retransform-Classes": true
        )
    }
    archiveBaseName = 'matilda-agent'
}
jar.dependsOn(agentJar, bootstrapJar)

// Configuration for unit test, all JVMs need to be set properly in order for all test to work
test {
    jvmArgs += ["--enable-preview","-javaagent:${project.rootDir}/build/libs/matilda-agent-${version}.jar",
                "-Dmatilda.bootstrap.jar=${project.rootDir}/build/libs/matilda-bootstrap-${version}.jar",
                // needs to be allowed so gradle worker can exit and negative Test cases work
                "-Dmatilda.runtime.exit.allow=module gradle.worker", "-Dmatilda.system.exec.allow=module matilda.core", "-Dmatilda.network.connect.allow=module matilda.core"]
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}
test.dependsOn(jar)